{ "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation template to create a new VPC or use an existing VPC for ECS deployment",

  "Mappings" : {

    "VpcCidrs" : {
      "eu-central-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "sa-east-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "ap-northeast-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "eu-west-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "us-east-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "us-west-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "us-west-2" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "ap-southeast-2" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" },
      "ap-southeast-1" : { "vpc" : "10.0.0.0/16", "pubsubnet1" : "10.0.0.0/24", "pubsubnet2" : "10.0.1.0/24" }
    },

    "ARNNamespace": {
      "us-east-1":      { "Partition": "aws" },
      "us-east-2":      { "Partition": "aws" },
      "us-west-2":      { "Partition": "aws" },
      "us-west-1":      { "Partition": "aws" },
      "eu-west-1":      { "Partition": "aws" },
      "eu-central-1":   { "Partition": "aws" },
      "ap-southeast-1": { "Partition": "aws" },
      "ap-northeast-1": { "Partition": "aws" },
      "ap-southeast-2": { "Partition": "aws" },
      "sa-east-1":      { "Partition": "aws" },
      "us-gov-west-1":  { "Partition": "aws-us-gov" }
    },

    "S3Region": {
      "us-east-1":      { "Region": "us-east-1" },
      "us-east-2":      { "Region": "us-east-2" },
      "us-west-2":      { "Region": "us-east-1" },
      "us-west-1":      { "Region": "us-east-1" },
      "eu-west-1":      { "Region": "us-east-1" },
      "eu-central-1":   { "Region": "us-east-1" },
      "ap-southeast-1": { "Region": "us-east-1" },
      "ap-northeast-1": { "Region": "us-east-1" },
      "ap-southeast-2": { "Region": "us-east-1" },
      "sa-east-1":      { "Region": "us-east-1" },
      "us-gov-west-1":  { "Region": "us-gov-west-1" }
    }

  },

  "Parameters" : {
    "Buckets": {
      "Description": "List deploy and media buckets",
      "Type": "CommaDelimitedList"
    },

    "DeployBucketPrefix" : {
      "Description" : "not used anymore",
      "Type" : "String",
      "Default" : "blank"
    },

    "storeFrontWebDocker" : {
      "Description" : "Storefront Web docker container address in docker.io",
      "Type": "String",
      "Default": "docker.io/nuodb/storefrontweb-demo:latest"
    },

    "storeFrontUserDocker" : {
      "Description" : "Storefront User work load container address in docker.io",
      "Type" : "String",
      "Default" : "docker.io/nuodb/storefrontuser-demo:latest"
    },

    "nuodbDocker" : {
      "Description" : "NuoDB docker container stored in docker.io",
      "Type" : "String",
      "Default" : "docker.io/nuodb/nuodb-ce-2.6.1:latest"
    },

    "EcsAmiId" : {
      "Type" : "String",
      "Description" : "ECS AMI Id"
    },

    "EcsInstanceType" : {
      "Type" : "String",
      "Description" : "ECS EC2 instance type",
      "Default" : "m4.large"
    },

    "KeyName" : {
      "Type" : "String",
      "Description" : "Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS instances",
      "Default" : ""
    },

    "VpcId" : {
      "Type" : "String",
      "Description" : "Optional - VPC Id of existing VPC. Leave blank to have a new VPC created",
      "Default" : "",
      "AllowedPattern" : "^(?:vpc-[0-9a-f]{8}|)$",
      "ConstraintDescription" : "VPC Id must begin with 'vpc-' or leave blank to have a new VPC created"
    },

    "SubnetIds" : {
      "Type" : "CommaDelimitedList",
      "Description" : "Optional - Comma separated list of existing VPC Subnet Ids where ECS instances will run",
      "Default" : ""
    },

    "AsgMaxSize" : {
      "Type" : "Number",
      "Description" : "Maximum size and initial Desired Capacity of ECS Auto Scaling Group",
      "Default" : "1"
    },

    "EcsClusterName" : {
      "Type" : "String",
      "Description" : "ECS Cluster Name",
      "Default" : "default"
    },

    "EcsPort" : {
      "Type" : "String",
      "Description" : "Optional - Security Group port to open on ECS instances - defaults to port 80",
      "Default" : "48004"
    },

    "ElbPort" : {
      "Type" : "String",
      "Description" : "Optional - Security Group port to open on ELB - port 80 will be open by default",
      "Default" : "48004"
    },

    "ElbProtocol" : {
      "Type" : "String",
      "Description" : "Optional - ELB Protocol - defaults to HTTP",
      "Default" : "TCP"
    },

    "ElbHealthCheckTarget" : {
      "Type" : "String",
      "Description" : "Optional - Health Check Target for ELB - defaults to TCP:48004",
      "Default" : "TCP:48004"
    },

    "SourceCidr" : {
      "Type" : "String",
      "Description" : "Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0",
      "Default" : "0.0.0.0/0"
    },

    "EcsEndpoint" : {
      "Type" : "String",
      "Description" : "Optional : ECS Endpoint for the ECS Agent to connect to",
      "Default" : ""
    },

    "CreateElasticLoadBalancer" : {
      "Type" : "String",
      "Description" : "Optional : When set to true, creates a ELB for ECS Service",
      "Default" : "true"
    }

  },

  "Conditions" : {
    "CreateVpcResources" : { "Fn::Equals" : [ { "Ref" : "VpcId" }, "" ] },
    "ExistingVpcResources" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "VpcId" }, "" ] } ] },
    "SetEndpointToECSAgent" : { "Fn::Not" : [ {
      "Fn::Equals" : [ { "Ref" : "EcsEndpoint" }, "" ]
    } ] },
    "CreateELBForExistingVpc" : { "Fn::And" : [
      { "Fn::Equals" : [ { "Ref" : "CreateElasticLoadBalancer" }, "true" ] },
      { "Condition" : "ExistingVpcResources" }
    ] },
    "CreateELBForNewVpc" : { "Fn::And" : [
      { "Fn::Equals" : [ { "Ref" : "CreateElasticLoadBalancer" }, "true" ] },
      { "Condition" : "CreateVpcResources" }
    ] },
    "CreateELB" : { "Fn::Or": [ { "Condition" : "CreateELBForExistingVpc" }, { "Condition" : "CreateELBForNewVpc" } ] },
    "CreateEC2LCWithKeyPair" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "KeyName" }, "" ] } ] },
    "CreateEC2LCWithoutKeyPair" : { "Fn::Equals" : [ { "Ref" : "KeyName" }, "" ]}
  },

  "Resources" : {

    "Vpc" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "vpc" ] },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true"
      }
    },

    "PubSubnetAz1" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet1" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] }
      }
    },

    "PubSubnetAz2" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet2" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] }
      }
    },

    "InternetGateway" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::InternetGateway"
    },

    "AttachGateway" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteViaIgw" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "Vpc"}
      }
    },

    "PublicRouteViaIgw" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteViaIgw" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PubSubnet1RouteTableAssociation" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz1" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet2RouteTableAssociation" : {
      "Condition" : "CreateVpcResources",
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz2" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "ElbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "ELB Allowed Ports",
        "VpcId" : { "Fn::If" : [ "CreateVpcResources", { "Ref" : "Vpc" }, { "Ref" : "VpcId" } ] },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : { "Ref" : "ElbPort" }, "ToPort" : { "Ref" : "ElbPort" },
            "CidrIp" : { "Ref" : "SourceCidr" } }
        ]
      }
    },

    "EcsSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "ECS Allowed Ports",
        "VpcId" : { "Fn::If" : [ "CreateVpcResources", { "Ref" : "Vpc" }, { "Ref" : "VpcId" } ] },
        "SecurityGroupIngress" : { "Fn::If" : [ "CreateELB",
          [
            { "IpProtocol" : "tcp", "FromPort" : { "Ref" : "EcsPort" }, "ToPort" : { "Ref" : "EcsPort" },
              "CidrIp" : { "Ref" : "SourceCidr" } },
            { "IpProtocol" : "tcp", "FromPort" : "1", "ToPort" : "65535", "SourceSecurityGroupId" :  { "Ref" : "ElbSecurityGroup" } }
          ],
          [
            { "IpProtocol" : "tcp", "FromPort" : { "Ref" : "EcsPort" }, "ToPort" : { "Ref" : "EcsPort" },
              "CidrIp" : { "Ref" : "SourceCidr" } }
          ]
        ] }
      }
    },

    "EcsElasticLoadBalancer" : {
      "Condition" : "CreateELBForNewVpc",
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "ElbSecurityGroup" } ],
        "Subnets" : [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ],
        "CrossZone" : "true",
        "Listeners" : [ {
          "LoadBalancerPort" : { "Ref" : "ElbPort" },
          "InstancePort" : { "Ref" : "EcsPort" },
          "Protocol" : { "Ref" : "ElbProtocol" }
        } ],
        "HealthCheck" : {
          "Target" : { "Ref" : "ElbHealthCheckTarget" },
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "10",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },

    "EcsElasticLoadBalancerExistingVpc" : {
      "Condition" : "CreateELBForExistingVpc",
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "ElbSecurityGroup" } ],
        "Subnets" : { "Ref" : "SubnetIds" },
        "CrossZone" : "true",
        "Listeners" : [ {
          "LoadBalancerPort" : { "Ref" : "ElbPort" },
          "InstancePort" : { "Ref" : "EcsPort" },
          "Protocol" : { "Ref" : "ElbProtocol" }
        } ],
        "HealthCheck" : {
          "Target" : { "Ref" : "ElbHealthCheckTarget" },
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "10",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
   },

    "ECSInstanceRole": {
      "Type": "AWS::IAM::Rle",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement":
          [
            {
              "Effect": "Allow",
              "Principal" : { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "*",
        "Policies":
        [
          {
            "PolicyName": "deployRead",
            "PolicyDocument": {
              "Statement":
              [
                {
                  "Action": [ "s3:Get*", "s3:List*" ],
                  "Effect": "Allow",
                  "Resource":
                  [
                    { "Fn::Join": [ "", [ "arn:", { "Fn::FindInMap" : [ "ARNNamespace", { "Ref" : "AWS::Region" },  "Partition" ] }, ":s3:::", { "Fn::Select" : [ "0", {"Ref" : "Buckets"}]}, "/"]]},
                    { "Fn::Join": [ "", [ "arn:", { "Fn::FindInMap" : [ "ARNNamespace", { "Ref" : "AWS::Region" },  "Partition" ] }, ":s3:::", { "Fn::Select" : [ "0", {"Ref" : "Buckets"}]}, "/*"]]}
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "deployBucketRead",
            "PolicyDocument": {
              "Statement":
              [
                {
                  "Action": [  "s3:List*" ],
                  "Effect": "Allow",
                  "Resource":
                  [
                    { "Fn::Join": [ "", [ "arn:", { "Fn::FindInMap" : [ "ARNNamespace", { "Ref" : "AWS::Region" },  "Partition" ] }, ":s3:::", { "Fn::Select" : [ "0", {"Ref" : "Buckets"}]}]]}
                  ]
                }
              ]
            }
          },

          {
            "PolicyName": "cloudwatchLogs",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:GetLogEvents",
                    "logs:PutLogEvents",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": [
                    { "Fn::Join": [ "", [ "arn:", { "Fn::FindInMap" : [ "ARNNamespace", { "Ref" : "AWS::Region" },  "Partition" ] }, ":logs:*:*:*" ]]}
                  ]
                }
              ]
            }
          },
          {
            "PolicyName" : "ECSCreateCluster",
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:UpdateContainerInstancesState",
                    "ecs:Submit*",
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "iam:*",
                    "elasticloadbalancing:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "createandattachvolume",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Stmt1441831086000",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AttachVolume",
                    "ec2:CreateVolume",
                    "ec2:DescribeVolumes",
                    "ec2:CreateSnapshot",
                    "ec2:DeleteSnapshot",
                    "ec2:DescribeSnapshots",
                    "ec2:CreateTags",
                    "ec2:ModifyInstanceAttribute"
                  ],
                  "Resource": [ "*" ]
                }
              ]
            }
          },
          {
            "PolicyName": "manageElb",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Stmt1441831086000",
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:*"
                  ],
                  "Resource": [ "*" ]
                }
              ]
            }
          },
          {
            "PolicyName": "assumeRole",
            "PolicyDocument": {
              "Version": "2008-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ecs-tasks.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
          },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "5",
          "Timeout": "PT15M"
        }
      }
    },

    "ECSInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "ECSInstanceRole" } ]
      }
    },

    "EcsInstanceLc" : {
      "Condition" : "CreateEC2LCWithKeyPair",
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Ref" : "EcsAmiId" },
        "InstanceType" : { "Ref" : "EcsInstanceType" },
        "AssociatePublicIpAddress" : true,
        "IamInstanceProfile": { "Ref": "ECSInstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups" : [ { "Ref" : "EcsSecurityGroup" } ],
        "UserData" : { "Fn::If" : [
          "SetEndpointToECSAgent" ,
          { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "echo ECS_CLUSTER=", { "Ref" : "EcsClusterName" }, " >> /etc/ecs/ecs.config",
            "\necho ECS_BACKEND_HOST=", { "Ref" : "EcsEndpoint" }, " >> /etc/ecs/ecs.config"
          ] ] } },
          { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "echo ECS_CLUSTER=", { "Ref" : "EcsClusterName" }, " >> /etc/ecs/ecs.config"
          ] ] } }
        ] }
      }
    },

    "EcsInstanceLcWithoutKeyPair" : {
      "Condition" : "CreateEC2LCWithoutKeyPair",
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Ref" : "EcsAmiId" },
        "InstanceType" : { "Ref" : "EcsInstanceType" },
        "AssociatePublicIpAddress" : true,
        "IamInstanceProfile": { "Ref": "ECSInstanceProfile" },
        "SecurityGroups" : [ { "Ref" : "EcsSecurityGroup" } ],
        "UserData" : { "Fn::If" : [
          "SetEndpointToECSAgent" ,
          { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "echo ECS_CLUSTER=", { "Ref" : "EcsClusterName" }, " >> /etc/ecs/ecs.config",
            "\necho ECS_BACKEND_HOST=", { "Ref" : "EcsEndpoint" }, " >> /etc/ecs/ecs.config"
          ] ] } },
          { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "echo ECS_CLUSTER=", { "Ref" : "EcsClusterName" }, " >> /etc/ecs/ecs.config"
          ] ] } }
        ] }
      }
    },

    "EcsInstanceAsg" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [ { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] }, { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] } ],
        "VPCZoneIdentifier" : { "Fn::If" : [ "CreateVpcResources", [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" } ] ] } ], { "Ref" : "SubnetIds" } ] },
        "LaunchConfigurationName" : { "Fn::If" : [ "CreateEC2LCWithKeyPair", { "Ref" : "EcsInstanceLc" }, { "Ref" : "EcsInstanceLcWithoutKeyPair" } ] },
        "MinSize" : "1",
        "MaxSize" : { "Ref" : "AsgMaxSize" },
        "DesiredCapacity" : { "Ref" : "AsgMaxSize" },
        "Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : ["", [ "ECS Instance - ", { "Ref" : "AWS::StackName" } ] ] }, "PropagateAtLaunch" : "true" } ]
      }
    },

    "EcsCluster" : {
      "Type" : "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : { "Ref" : "EcsClusterName" }
      }
    },

    "LambdaInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement":
          [
            {
              "Effect": "Allow",
              "Principal" : { "Service": [ "lambda.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies":
        [
          {
            "PolicyName": "ec2ContainerServices",
            "PolicyDocument":{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:*",
                    "logs:*",
                    "s3:*",
                    "elasticloadbalancing:*",
                    "iam:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "delegateRole",
            "PolicyDocument": {

            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*"

            }
          }
        ]
      }
    },

    "deployNuodbContainers": {
      "DependsOn": [
        "LambdaInstanceRole"
      ],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaInstanceRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": { "Fn::Select" : [ "0", {"Ref" : "Buckets"}]},
          "S3Key": "cfn/lambda/deploy-nuodb-containers.zip"
        },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      }
    },

    "deployDemoWebContainer": {
      "DependsOn": [
        "LambdaInstanceRole"
      ],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaInstanceRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": { "Fn::Select" : [ "0", {"Ref" : "Buckets"}]},
          "S3Key": "cfn/lambda/launchWebContainer.zip"
        },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      }
    },

    "deployUserContainer": {
      "DependsOn": [
        "LambdaInstanceRole"
      ],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaInstanceRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": { "Fn::Select" : [ "0", {"Ref" : "Buckets"}]},
          "S3Key": "cfn/lambda/launchWebContainer.zip"
        },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      }
    },

    "DeployWebContainer" : {
      "DependsOn" : ["deployDemoWebContainer", "EcsCluster" ],
      "Type": "Custom::LaunchWebContainer",
      "Version" : "1.0",
      "Properties" : {
        "ServiceToken": {"Fn::GetAtt" : [ "deployDemoWebContainer", "Arn"] },
        "dockerImage": { "Ref" : "storeFrontWebDocker" },
        "JDBC_URL" : { "Fn::GetAtt" : ["EcsElasticLoadBalancer", "DNSName"] },
        "role" : { "Ref" : "ECSInstanceProfile" },
        "region": { "Ref" : "AWS::Region" },
        "cluster" : { "Ref" : "EcsClusterName" }
      }
    }

  },

  "Outputs" : {

    "EcsInstanceAsgName" : {
      "Description" : "Auto Scaling Group Name for ECS Instances",
      "Value" : { "Ref" : "EcsInstanceAsg" }
    },
    "EcsElbName" : {
      "Description" : "Load Balancer for ECS Service",
      "Value" : { "Fn::If" : [ "CreateELB",
        { "Fn::If" : [ "CreateELBForNewVpc", { "Ref" : "EcsElasticLoadBalancer" }, { "Ref" : "EcsElasticLoadBalancerExistingVpc" } ] },
        ""
      ] }
    }

  }

}