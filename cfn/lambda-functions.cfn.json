{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Lambda Functions",
  "Parameters" : {
    "EcsClusterName" : {
      "Type" : "String"
    },
    "StorefrontURL" : {
       "Type" : "String"
    },
    "storeFrontUserDocker" : {
      "Type" : "String"
    },
    "dbuser" : {
      "Type": "String"
    },

    "dbpassword" : {
      "Type": "String"
    },

    "dbname" : {
      "Type": "String"
    },
    "BrokerElbURL" : {
      "Type" : "String"
    },
    "EnvironmentType" : {
      "Type" : "String"
    },
    "TeASG" : {
      "Type" : "String"
    }
  },

  "Conditions" : {
    "CreateNuoDBonEC2" : { "Fn::Equals" : [ {"Ref" : "EnvironmentType"}, "AWSEC2" ]}
  },

  "Resources" : {

    "LambdaInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement":
          [
            {
              "Effect": "Allow",
              "Principal" : { "Service": [ "lambda.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies":
        [
          {
            "PolicyName": "ec2ContainerServices",
            "PolicyDocument":{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "deployUserContainer": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaInstanceRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile" : { "Fn::Join" : ["", [
            "import boto3, urllib2, json\n",

            "client = boto3.client('ecs')\n",
            "def handler(event, context):\n",
            "    print(event)\n",

            "    responseURL = \"", { "Fn::Join" : ["", ["http://", { "Ref" : "StorefrontURL" }, ":80/StorefrontWeb/api/app-instances/log" ]]}, "\"\n",
            "    try:\n",
            "        response = client.register_task_definition(\n",
            "            family='storefrontuser-family',\n",
            "            taskRoleArn='", { "Ref" : "LambdaInstanceRole" }, "',\n",
            "            containerDefinitions=[\n",
            "             {\n",
            "               'name': 'storefrontuser-definition',\n",
            "               'image': '", { "Ref" : "storeFrontUserDocker" }, "',\n",
            "               'cpu': 2,\n",
            "               'memoryReservation': 4096,\n",
            "               'readonlyRootFilesystem': False,\n",
            "               'privileged': True,\n",
            "               'environment': [\n",
            "                 {\n",
            "                   'name': 'ENV_TYPE',\n",
            "                   'value': 'AWSECS'\n",
            "                 },\n",
            "                 {\n",
            "                   'name': 'ARG_dburl',\n",
            "                   'value': '", { "Fn::Join" : [ "", [ { "Ref" : "dbname"}, "@", { "Ref" : "BrokerElbURL" }, ":48004" ]]}, "'\n",
            "                 },\n",
            "                 {\n",
            "                   'name': 'ARG_dbuser',\n",
            "                   'value': '", { "Ref" : "dbuser" }, "'\n",
            "                 },\n",
            "                 {\n",
            "                   'name': 'ARG_dbpassword',\n",
            "                   'value': '", { "Ref" : "dbpassword" }, "'\n",
            "                 },\n",
            "                 {\n",
            "                   'name': 'ARG_workloadmulti_browseusers',\n",
            "                   'value': event['multi_browse']\n",
            "                 },\n",
            "                 {\n",
            "                   'name': 'ARG_workloadmulti_shopusers',\n",
            "                   'value': event['multi_shop']\n",
            "                 },\n",
            "                 {\n",
            "                   'name': 'ARG_workloadadmin_run_reportusers',\n",
            "                   'value': event['admin_run_report']\n",
            "                 },\n",
            "                 {\n",
            "                   'name': 'ARG_workloadmulti_browse_and_reviewusers',\n",
            "                   'value': event['multi_browse_and_review']\n",
            "                 },\n",
            "                 {\n",
            "                   'name': 'ARG_apphost',\n",
            "                   'value': '", { "Fn::Join" : ["", ["http://", { "Ref" : "StorefrontURL"}, ":80/StorefrontWeb" ]]}, "'\n",
            "                 }\n",
            "               ]\n",
            "             }\n",
            "           ]\n",
            "        )\n",
            "        print(response)\n",
            "        data = json.dumps({'Data' : '(task-definition storefrontuser-definition) has been sucessfully updated.'})\n",

            "        req = urllib2.Request(responseURL, data)\n",
            "        req.add_header('Content-Type', 'application/json')\n",
            "        response = urllib2.urlopen(req)\n",
            "        result = response.read()\n",
            "        print result\n",

            "    except Exception as e:\n",
            "        print(e)\n",

            "    familyArn = client.list_task_definitions(familyPrefix='storefrontuser-family', sort='DESC', maxResults=1)\n",

            "    try:\n",
            "        response = client.create_service(\n",
            "            cluster='", { "Ref" : "EcsClusterName" }, "',\n",
            "            serviceName='storefrontuser-service',\n",
            "            taskDefinition=familyArn['taskDefinitionArns'][0],\n",
            "            desiredCount=event['count'],\n",
            "            placementStrategy=[\n",
            "              {\n",
            "                'type': 'random'\n",
            "              }\n",
            "            ]\n",
            "        )\n",
            "        print(response)\n",
            "    except Exception as e:\n",
            "        print(e)\n",
            "        response = client.update_service(\n",
            "            cluster='", { "Ref" : "EcsClusterName" }, "',\n",
            "            service='storefrontuser-service',\n",
            "            #taskDefinition=familyArn['taskDefinitionArns'][0],\n",
            "            desiredCount=event['count']\n",
            "        )\n",
            "        print(response)\n",
            "        data = json.dumps({'Data' : '(service storefrontuser-service) has reached a steady state.'})\n",

            "        req = urllib2.Request(responseURL, data)\n",
            "        req.add_header('Content-Type', 'application/json')\n",
            "        response = urllib2.urlopen(req)\n",
            "        result = response.read()\n",
            "        print result\n"

          ]]}
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      }
    },

    "ScaleTEService": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaInstanceRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile" : { "Fn::Join" : ["", [
            "import boto3, urllib, urllib2, json\n",

            "def handler(event, context):\n",

            "    responseURL = \"", { "Fn::Join" : ["", ["http://", { "Ref" : "StorefrontURL" }, ":80/StorefrontWeb/api/app-instances/log" ]]}, "\"\n",
            "    print(event)\n",

            "    try:\n",
            "        if '", { "Ref" : "EnvironmentType"}, "' == 'AWSECS':\n",
            "            client = boto3.client('ecs')\n",
            "            response = client.update_service(\n",
            "                cluster='", { "Ref" : "EcsClusterName" }, "',\n",
            "                service='TE-service',\n",
            "                desiredCount=event['count'],\n",
            "            )\n",
            "            print(response)\n",
            "            data = json.dumps({'Data' : '(service TE-service) has reached a steady state.'})\n",
            "        else:\n",
            "            client = boto3.client('autoscaling')\n",
            "            response = client.set_desired_capacity(\n",
            "                AutoScalingGroupName='", { "Ref" : "TeASG" }, "',\n",
            "                DesiredCapacity=event['count'],\n",
            "                HonorCooldown=True\n",
            "            )\n",
            "            print(response)\n",
            "            data = json.dumps({'Data' : '(ASG TE) has reached a steady state.'})\n",

            "        req = urllib2.Request(responseURL, data)\n",
            "        req.add_header('Content-Type', 'application/json')\n",
            "        response = urllib2.urlopen(req)\n",
            "        result = response.read()\n",
            "        print result\n",

            "    except Exception as e:\n",
            "        print(e)\n",
            "        data = json.dumps({'Data': e})\n",

            "        req = urllib2.Request(responseURL, data)\n",
            "        req.add_header('Content-Type', 'application/json')\n",
            "        response = urllib2.urlopen(req)\n",
            "        result = response.read()\n",
            "        print result\n"

          ]]}
        },
        "Runtime": "python2.7",
        "Timeout": "300"
      }
    }
  },
  "Outputs" : {
    "LambdaUserContinerArn" : {
      "Description" : "Arn address of user lambda function",
      "Value" : { "Fn::GetAtt" : [ "deployUserContainer", "Arn"] }
    },
    "ScaleTEService" : {
      "Description" : "Arn address of TE lambda function",
      "Value" : { "Fn::GetAtt" : [ "ScaleTEService", "Arn" ]}
    }
  }
}